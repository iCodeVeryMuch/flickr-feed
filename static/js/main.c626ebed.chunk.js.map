{"version":3,"sources":["components/DropDown.js","device.js","components/styled.js","components/ImageCard.js","components/ImageCards.js","App.js","serviceWorker.js","index.js"],"names":["DdWrapper","styled","div","DdToggle","DdSelected","DdMenu","ul","DdMenuItem","li","DropDown","choices","useState","listOpen","setListOpen","aria-label","onClick","aria-expanded","style","margin","marginTop","color","size","icon","faChevronUp","faChevronDown","map","item","key","mobileS","mobile","tablet","laptop","laptopL","desktop","device","Object","keys","reduce","acc","FlexCard","FlexWrapper","Image","img","attrs","props","alt","SafeLink","a","rel","target","NBSP","Text","Description","Break","MarginWrapper","ImageCard","photo","title","src","url","href","author","description","tags","onSelectDropDownItem","ImageCards","photos","length","index","GlobalStyle","createGlobalStyle","AppWrapper","Header","header","formatPhotoFeedData","substring","media","m","replace","split","indexOf","author2","App","setPhotos","useEffect","Promise","resolve","reject","jsonp","param","err","data","then","publicPhotoFeed","items","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c626ebed.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons'\n\nexport const DdWrapper = styled.div`\n    position: relative;\n    display: inline-block;\n`;\n\nexport const DdToggle = styled.div`\n    border: 1px solid black;\n    display: flex;\n    color: black;\n    width: 80px;\n    padding: 10px;\n    margin: auto;\n`;\n\nexport const DdSelected = styled.div`\n    margin-right: 5px;\n    color: black;\n    margin: auto;\n`;\n\nexport const DdMenu = styled.ul`\n    z-index: 10;\n    background: white;\n    border: 1px solid black;\n    position: absolute;\n    color: black;\n    overflow:hidden;\n    padding: 0;\n    width: 80px;\n    padding: 10px;\n    margin-top: 5px;\n    list-style-type: none;\n`;\n\nexport const DdMenuItem = styled.li`\n    width: 100%;\n    line-height: 1.6rem;\n    padding-top: 3px;\n    padding-bottom: 3px;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    text-align: center;\n    overflow: hidden;\n`;\n\nexport const DropDown = ({choices}) => {\n\n    const [listOpen, setListOpen] = useState(false);\n\n    const toggleList = () => {\n        setListOpen(!listOpen);\n    }\n\n    return (<DdWrapper aria-label=\"Tags dropdown\" onClick={toggleList}>\n        <DdToggle aria-expanded={listOpen ? true:false}>\n            <DdSelected>Tags</DdSelected>\n            <FontAwesomeIcon style={{  margin: \"auto\", marginTop: \"2px\" }} color=\"red\" size=\"1x\"\n                             icon={listOpen ? faChevronUp : faChevronDown}/>\n        </DdToggle>\n        {listOpen && <DdMenu>\n            {choices.map((item) => (\n                <DdMenuItem key={item}>{item}</DdMenuItem>\n            ))}\n        </DdMenu>}</DdWrapper>);\n}\nexport default DropDown;","const size = {\n    mobileS: '375px',\n    mobile: '425px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n    desktop: '2560px'\n}\n\nexport const device = Object.keys(size).reduce((acc, key) => {\n    acc[key] = style => `\n    @media (min-width: ${size[key]}) {\n      ${style};\n    }\n  `\n    return acc\n}, {})","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { device } from '../device'\n\nexport const FlexCard = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    padding: 20px;\n    border: 1px solid grey;\n    margin: 10px;\n    min-width: calc(100% - 62px);\n\n    ${device.mobile`\n        min-width: calc(50% - 62px);\n    `};\n\n    ${device.tablet`\n        min-width: calc(33% - 62px);\n    `};\n\n    ${device.laptop`\n        min-width: calc(25% - 62px);\n    `};\n\n    ${device.laptopL`\n        min-width: calc(20% - 62px);\n    `};\n\n     ${device.desktop`\n        min-width: calc(20% - 62px);\n    `};\n\n`;\n\nexport const FlexWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`;\n\nexport const Image = styled.img.attrs(props => ({alt: props.alt || \"flickr image\"}))`\n    height: auto;\n    width: 100%;\n    margin-bottom: 10px;\n`;\n\nexport const SafeLink = styled.a.attrs({rel: \"noopener noreferrer\", target: \"_blank\"})``;\n\nexport const NBSP = () => <span>&nbsp;</span>\n\nexport const Text = styled.div``;\n\nexport const Description = styled.div`\n    margin-top: 10px;\n    overflow:hidden;\n    margin-bottom: 20px;\n`;\n\nexport const Break = styled.div`\n  flex-basis: 100%;\n  height: 0;\n`;\n\nexport const MarginWrapper = styled.div`\n    margin-top: auto;\n    margin-left: auto;\n    margin-right: auto;\n`;\n\n","import React from \"react\";\nimport DropDown from \"./DropDown\";\nimport { FlexWrapper, FlexCard, Image,SafeLink, Text, NBSP, Break, Description, MarginWrapper } from './styled'\n\nexport const ImageCard = ({photo}) => {\n    return (\n            <FlexCard>\n                <FlexWrapper>\n                <Image alt={photo.title} src={photo.url}/>\n                <SafeLink href={photo.url}>{photo.title}</SafeLink>\n                <NBSP/>\n                <Text>{\"by\"}</Text>\n                <NBSP/>\n                <SafeLink href={photo.url}>{photo.author}</SafeLink>\n                <Break></Break>\n                <Description>{photo.description}</Description>\n                <Break></Break>\n                </FlexWrapper>\n                <MarginWrapper>\n                    <DropDown\n                        choices={photo.tags}\n                        onSelectDropDownItem={() => null} />\n                </MarginWrapper>\n    </FlexCard>);\n}\nexport default ImageCard\n\n","import React from \"react\";\nimport ImageCard from \"./ImageCard\";\nimport styled from \"styled-components/macro\";\n\nexport const FlexWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`;\n\nexport const ImageCards = ({photos}) => {\n\n    if (photos.length > 0)  {\n        return (<FlexWrapper>\n            {photos.map((photo, index) => <ImageCard key={index} photo={photo}></ImageCard>)}\n        </FlexWrapper>);\n    }\n    else {\n        return <div></div>\n    }\n\n}\nexport default ImageCards\n\n","import React, { useEffect, useState } from \"react\";\nimport ImageCards from \"./components/ImageCards\";\nimport styled from \"styled-components/macro\";\nimport { device } from './device'\nimport jsonp from 'jsonp';\nimport { createGlobalStyle } from \"styled-components/macro\";\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n    font-size: calc(12px + 0.25vw);\n}\n`;\n\nexport const AppWrapper = styled.div`\n    margin: 2vh;\n    ${device.tablet`\n        margin: 5vh;\n    `};\n`;\n\nexport const Header = styled.header`\n    height: auto;\n    width: 100%;\n    margin-bottom: 5px;\n`;\n\nexport const getPublicPhotoFeed = () => {\n    return new Promise((resolve, reject) => {\n        jsonp(\"https://api.flickr.com/services/feeds/photos_public.gne?format=json&tags='safe,dog'\", {\n            param: \"jsoncallback\"\n        }, function (err, data) {\n            if (err != null) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    })\n}\n\nexport const formatPhotoFeedData = (item) => {\n    return {\n        ...item,\n        title: item.title.length === 0 ? 'NoTitle' : item.title.substring(0, 20),\n        url: item.media.m.replace('m.jpg', 'q.jpg'),\n        tags: item.tags.split(' '),\n        author: item.author.substring(item.author.indexOf('(\"') + 2, item.author.indexOf('\")')),\n        author2: item.author,\n        description: item.description.replace(/<(.|\\n)*?>/g, '').substring(0, 100)\n    }\n}\n\nexport const App = () => {\n\n    const [photos, setPhotos] = useState([]);\n\n    useEffect(() => {\n        getPublicPhotoFeed().then((publicPhotoFeed) => {\n            const photos = publicPhotoFeed.items.map((item) => {\n                return formatPhotoFeedData(item);\n            })\n            setPhotos(photos);\n        });\n    }, []);\n\n    return (<AppWrapper>\n        <GlobalStyle />\n        <Header>Flickr images...</Header>\n        <main>\n            <ImageCards photos={photos}></ImageCards>\n        </main>\n    </AppWrapper>);\n\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}